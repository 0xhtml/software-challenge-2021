#ifndef SOFTWARE_CHALLENGE_2021_PIECES_H
#define SOFTWARE_CHALLENGE_2021_PIECES_H

#include "Constants.h"
#include "Types.h"

const U8 PIECES[PIECE_COUNT][ROTATION_COUNT][FLIPPED_COUNT][PIECE_SIZE] = {{{{0b1}}},
                                                                           {{{0b11}},                                                  {{0b1,    0b1}}},
                                                                           {{{0b1,    0b11},              {0b10,  0b11}},              {{0b11,   0b1},               {0b11,   0b10}}},
                                                                           {{{0b1,    0b1,   0b1}},                                    {{0b111}}},
                                                                           {{{0b1,    0b1,   0b1,  0b1}},                              {{0b1111}}},
                                                                           {{{0b1,    0b1,   0b11},       {0b10,  0b10,  0b11}},       {{0b111,  0b1},               {0b111,  0b100}},           {{0b11,   0b10,  0b10},       {0b11, 0b1,   0b1}},        {{0b100,  0b111},             {0b1,    0b111}},},
                                                                           {{{0b11,   0b11}}},
                                                                           {{{0b111,  0b10}},                                          {{0b10,   0b11,  0b10},       {0b1,    0b11,  0b1}},      {{0b10,   0b111}}},
                                                                           {{{0b11,   0b110},             {0b110, 0b11}},              {{0b10,   0b11,  0b1},        {0b1,    0b11,  0b10}}},
                                                                           {{{0b1,    0b1,   0b1,  0b1, 0b1}},                         {{0b11111}}},
                                                                           {{{0b101,  0b111}},                                         {{0b11,   0b1,   0b11},       {0b11,   0b10,  0b11}},     {{0b111,  0b101}}},
                                                                           {{{0b1,    0b1,   0b1,  0b11}, {0b10,  0b10,  0b10, 0b11}}, {{0b1111, 0b1},               {0b1111, 0b1000}},          {{0b11,   0b10,  0b10, 0b10}, {0b11, 0b1,   0b1,  0b1}},  {{0b1000, 0b1111},            {0b1,    0b1111}}},
                                                                           {{{0b1,    0b1,   0b111},      {0b100, 0b100, 0b111}},      {{0b111,  0b1,   0b1},        {0b111,  0b100, 0b100}}},
                                                                           {{{0b11,   0b11,  0b1},        {0b11,  0b11,  0b10}},       {{0b111,  0b110},             {0b111,  0b11}},            {{0b10,   0b11,  0b11},       {0b1,  0b11,  0b11}},       {{0b11,   0b111},             {0b110,  0b111}}},
                                                                           {{{0b1,    0b11,  0b110},      {0b100, 0b110, 0b11}},       {{0b110,  0b11,  0b1},        {0b11,   0b110, 0b100}}},
                                                                           {{{0b100,  0b111, 0b10},       {0b1,   0b111, 0b10}},       {{0b10,   0b11,  0b110},      {0b10,   0b110, 0b11}},     {{0b10,   0b111, 0b1},        {0b10, 0b111, 0b100}},      {{0b11,   0b110, 0b10},       {0b110,  0b11, 0b10}}},
                                                                           {{{0b10,   0b111, 0b10}}},
                                                                           {{{0b11,   0b10,  0b110},      {0b110, 0b10,  0b11}},       {{0b100,  0b111, 0b1},        {0b1,    0b111, 0b100}}},
                                                                           {{{0b10,   0b11,  0b10, 0b10}, {0b1,   0b11,  0b1,  0b1}},  {{0b100,  0b1111},            {0b10,   0b1111}},          {{0b1,    0b1,   0b11, 0b1},  {0b10, 0b10,  0b11, 0b10}}, {{0b1111, 0b10},              {0b1111, 0b100}}},
                                                                           {{{0b111,  0b10,  0b10}},                                   {{0b100,  0b111, 0b100},      {0b1,    0b111, 0b1}},      {{0b10,   0b10,  0b111}}},
                                                                           {{{0b1110, 0b11},              {0b111, 0b1100}},            {{0b1,    0b11,  0b10, 0b10}, {0b10,   0b11,  0b1, 0b1}}, {{0b1100, 0b111},             {0b11, 0b1110}},            {{0b1,    0b1,   0b11, 0b10}, {0b10,   0b10, 0b11, 0b1}}}};

#define PIECE(move) PIECES[(move).piece][(move).rotation][(move).flipped]

const U8 PIECE_BOUNDS[PIECE_COUNT][2] = {{0, 0},
                                         {0, 1},
                                         {1, 1},
                                         {2, 0},
                                         {3, 0},
                                         {2, 0},
                                         {1, 1},
                                         {1, 2},
                                         {1, 2},
                                         {4, 0},
                                         {1, 2},
                                         {3, 1},
                                         {2, 2},
                                         {2, 2},
                                         {2, 2},
                                         {2, 2},
                                         {2, 2},
                                         {2, 2},
                                         {3, 1},
                                         {2, 2},
                                         {1, 3}};

#define PIECE_BOUND_X(move) PIECE_BOUNDS[(move).piece][((move).rotation == 1 || (move).rotation == 3) ? 1 : 0]
#define PIECE_BOUND_Y(move) PIECE_BOUNDS[(move).piece][((move).rotation == 1 || (move).rotation == 3) ? 0 : 1]

const U8 PIECE_ORDER_MAP[PIECE_COUNT] = {16, 15, 14, 13, 9, 18, 11, 4, 20, 19, 17, 12, 10, 8, 7, 6, 5, 3, 2, 1, 0};

#endif
